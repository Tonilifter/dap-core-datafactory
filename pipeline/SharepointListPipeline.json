{
	"name": "SharepointListPipeline",
	"properties": {
		"activities": [
			{
				"name": "CopyExtractionMetadata",
				"type": "WebActivity",
				"dependsOn": [
					{
						"activity": "Renew Set metadataHttpToken",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": true
				},
				"userProperties": [],
				"typeProperties": {
					"url": {
						"value": "@concat('https://coreutils', replace(replace(pipeline().DataFactory, 'dfcore', ''),'ds', ''), 'akcore.cloudapp.repsol.com/dap-core-extraction-utils/parse-metadata')",
						"type": "Expression"
					},
					"method": "POST",
					"headers": {
						"x-application-name": {
							"value": "@pipeline().parameters.applicationName",
							"type": "Expression"
						},
						"x-region": {
							"value": "@pipeline().parameters.region",
							"type": "Expression"
						},
						"x-source-type": {
							"value": "sharepoint",
							"type": "Expression"
						},
						"x-reference-date": {
							"value": "@variables('referenceDate')",
							"type": "Expression"
						},
						"x-file-type": "avro",
						"x-extraction-ts": {
							"value": "@activity('GetGovernanceMetadata').output.ts",
							"type": "Expression"
						},
						"x-landing-type": "sl",
						"x-dataset-metadata": "metadata",
						"Authorization": {
							"value": "@concat('Bearer ', variables('metadataHttpToken'))",
							"type": "Expression"
						},
						"x-is-interval": {
							"value": "false",
							"type": "Expression"
						},
						"x-append-folder": "true",
						"x-exclude-ds-path": "true",
						"x-ds-to-lower": "true"
					},
					"body": {
						"value": "@json(concat('{\"dataset_metadata\": ', activity('GetGovernanceMetadata').output.datasets, '}'))",
						"type": "Expression"
					}
				}
			},
			{
				"name": "Execute Ingestion",
				"description": "From Blob to DataLake",
				"type": "ExecutePipeline",
				"dependsOn": [
					{
						"activity": "CopyExtractionMetadata",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"pipeline": {
						"referenceName": "IngestionEphemeralPipeline",
						"type": "PipelineReference"
					},
					"waitOnCompletion": true,
					"parameters": {
						"metadataPath": {
							"value": "@activity('CopyExtractionMetadata').output.metadataPath",
							"type": "Expression"
						},
						"applicationName": {
							"value": "@pipeline().parameters.applicationName",
							"type": "Expression"
						},
						"region": {
							"value": "@pipeline().parameters.region",
							"type": "Expression"
						},
						"extractionDate": {
							"value": "@activity('GetGovernanceMetadata').output.datasets[0].sink_date",
							"type": "Expression"
						},
						"workers": {
							"value": "@{if(empty(string(activity('GetGovernanceMetadata').output.datasets[0].min_workers)),2,string(activity('GetGovernanceMetadata').output.datasets[0].min_workers))}:@{if(empty(string(activity('GetGovernanceMetadata').output.datasets[0].max_workers)),8,string(activity('GetGovernanceMetadata').output.datasets[0].max_workers))}",
							"type": "Expression"
						},
						"parentUid": {
							"value": "@variables('uid')",
							"type": "Expression"
						},
						"package": {
							"value": "@pipeline().parameters.package",
							"type": "Expression"
						}
					}
				}
			},
			{
				"name": "OperationaLogStart",
				"type": "ExecutePipeline",
				"dependsOn": [],
				"userProperties": [],
				"typeProperties": {
					"pipeline": {
						"referenceName": "OperationalLogPipeline",
						"type": "PipelineReference"
					},
					"waitOnCompletion": false,
					"parameters": {
						"nivel": "INFO",
						"modulo": "EXTRACTION_SHAREPOINT",
						"pipelineName": {
							"value": "@pipeline().Pipeline",
							"type": "Expression"
						},
						"logType": "START",
						"applicationName": {
							"value": "@pipeline().parameters.applicationName",
							"type": "Expression"
						},
						"dataDate": {
							"value": "@variables('referenceDate')",
							"type": "Expression"
						},
						"datasetName": {
							"value": "@pipeline().parameters.datasetName",
							"type": "Expression"
						},
						"region": {
							"value": "@pipeline().parameters.region",
							"type": "Expression"
						},
						"sourceType": {
							"value": "sharepoint",
							"type": "Expression"
						},
						"uid": {
							"value": "@variables('uid')",
							"type": "Expression"
						}
					}
				}
			},
			{
				"name": "GetMetadataIdToken",
				"type": "WebActivity",
				"dependsOn": [
					{
						"activity": "OperationaLogStart",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": true,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"url": {
						"value": "@concat('https://', replace(replace(pipeline().DataFactory, 'dfcore', ''),'ds', ''), 'corekv.vault.azure.net/secrets/adapp-extract-id?api-version=7.0')",
						"type": "Expression"
					},
					"connectVia": {
						"referenceName": "IntegrationRuntimeFreezer",
						"type": "IntegrationRuntimeReference"
					},
					"method": "GET",
					"authentication": {
						"type": "MSI",
						"resource": "https://vault.azure.net"
					}
				}
			},
			{
				"name": "Set MeatadataIdToken",
				"type": "SetVariable",
				"dependsOn": [
					{
						"activity": "GetMetadataIdToken",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"variableName": "metadataIdToken",
					"value": {
						"value": "@activity('GetMetadataIdToken').output.value",
						"type": "Expression"
					}
				}
			},
			{
				"name": "GetMetadataSecretToken",
				"type": "WebActivity",
				"dependsOn": [
					{
						"activity": "OperationaLogStart",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": true,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"url": {
						"value": "@concat('https://', replace(replace(pipeline().DataFactory, 'dfcore', ''),'ds', ''), 'corekv.vault.azure.net/secrets/adsp-extract-secret?api-version=7.0')",
						"type": "Expression"
					},
					"connectVia": {
						"referenceName": "IntegrationRuntimeFreezer",
						"type": "IntegrationRuntimeReference"
					},
					"method": "GET",
					"authentication": {
						"type": "MSI",
						"resource": "https://vault.azure.net"
					}
				}
			},
			{
				"name": "Set MetadataSecretToken",
				"type": "SetVariable",
				"dependsOn": [
					{
						"activity": "GetMetadataSecretToken",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"variableName": "metadataSecretToken",
					"value": {
						"value": "@activity('GetMetadataSecretToken').output.value",
						"type": "Expression"
					}
				}
			},
			{
				"name": "HttpMetadataToken",
				"type": "WebActivity",
				"dependsOn": [
					{
						"activity": "Set MeatadataIdToken",
						"dependencyConditions": [
							"Succeeded"
						]
					},
					{
						"activity": "Set MetadataSecretToken",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": true,
					"secureInput": true
				},
				"userProperties": [],
				"typeProperties": {
					"url": "https://login.microsoftonline.com/0a25214f-ee52-483c-b96b-dc79f3227a6f/oauth2/v2.0/token",
					"method": "POST",
					"headers": {
						"Content-Type": "application/x-www-form-urlencoded"
					},
					"body": {
						"value": "@concat('client_id=', variables('metadataIdToken'), '&client_secret=',  encodeUriComponent(variables('metadataSecretToken')), '&grant_type=client_credentials&scope=https://graph.microsoft.com/.default')",
						"type": "Expression"
					}
				}
			},
			{
				"name": "Set httpMetadataToken",
				"type": "SetVariable",
				"dependsOn": [
					{
						"activity": "HttpMetadataToken",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"variableName": "metadataHttpToken",
					"value": {
						"value": "@activity('HttpMetadataToken').output.access_token",
						"type": "Expression"
					}
				}
			},
			{
				"name": "GetGovernanceMetadata",
				"type": "WebActivity",
				"dependsOn": [
					{
						"activity": "Set httpMetadataToken",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": true
				},
				"userProperties": [],
				"typeProperties": {
					"url": {
						"value": "@concat('https://coreutils', replace(replace(pipeline().DataFactory, 'dfcore', ''),'ds', ''), 'akcore.cloudapp.repsol.com/dap-core-extraction-utils/governance-metadata')",
						"type": "Expression"
					},
					"method": "GET",
					"headers": {
						"x-application-name": {
							"value": "@pipeline().parameters.applicationName",
							"type": "Expression"
						},
						"x-region": {
							"value": "@pipeline().parameters.region",
							"type": "Expression"
						},
						"x-source-type": {
							"value": "sharepoint",
							"type": "Expression"
						},
						"x-reference-date": {
							"value": "@variables('referenceDate')",
							"type": "Expression"
						},
						"x-mock-results": "false",
						"x-package-name": {
							"value": "@pipeline().parameters.package",
							"type": "Expression"
						},
						"Authorization": {
							"value": "@concat('Bearer ', variables('metadataHttpToken'))",
							"type": "Expression"
						},
						"x-is-interval": {
							"value": "false",
							"type": "Expression"
						},
						"x-structured": "true",
						"x-dataset-name": {
							"value": "@pipeline().parameters.datasetName",
							"type": "Expression"
						}
					}
				}
			},
			{
				"name": "OperationaLogEnd",
				"type": "ExecutePipeline",
				"dependsOn": [
					{
						"activity": "CopyExtractionMetadata",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"pipeline": {
						"referenceName": "OperationalLogPipeline",
						"type": "PipelineReference"
					},
					"waitOnCompletion": false,
					"parameters": {
						"nivel": "INFO",
						"modulo": "EXTRACTION_SHAREPOINT",
						"pipelineName": {
							"value": "@pipeline().Pipeline",
							"type": "Expression"
						},
						"logType": "END",
						"applicationName": {
							"value": "@pipeline().parameters.applicationName",
							"type": "Expression"
						},
						"dataDate": {
							"value": "@variables('referenceDate')",
							"type": "Expression"
						},
						"region": {
							"value": "@pipeline().parameters.region",
							"type": "Expression"
						},
						"sourceType": {
							"value": "sharepoint",
							"type": "Expression"
						},
						"uid": {
							"value": "@variables('uid')",
							"type": "Expression"
						},
						"datasetIn": {
							"value": "@variables('datasetIn')",
							"type": "Expression"
						},
						"datasetOut": {
							"value": "@variables('datasetOut')",
							"type": "Expression"
						}
					}
				}
			},
			{
				"name": "OperationaLogErrorCreateMetadata",
				"type": "ExecutePipeline",
				"dependsOn": [
					{
						"activity": "CopyExtractionMetadata",
						"dependencyConditions": [
							"Failed"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"pipeline": {
						"referenceName": "OperationalLogPipeline",
						"type": "PipelineReference"
					},
					"waitOnCompletion": true,
					"parameters": {
						"nivel": "ERROR",
						"modulo": "EXTRACTION_SHAREPOINT",
						"pipelineName": {
							"value": "@pipeline().Pipeline",
							"type": "Expression"
						},
						"logType": "END",
						"applicationName": {
							"value": "@pipeline().parameters.applicationName",
							"type": "Expression"
						},
						"dataDate": {
							"value": "@variables('referenceDate')",
							"type": "Expression"
						},
						"region": {
							"value": "@pipeline().parameters.region",
							"type": "Expression"
						},
						"message": {
							"value": "@concat('CopyExtractionMetadata: ', activity('CopyExtractionMetadata').error.message)",
							"type": "Expression"
						},
						"sourceType": {
							"value": "sharepoint",
							"type": "Expression"
						},
						"uid": {
							"value": "@variables('uid')",
							"type": "Expression"
						}
					}
				}
			},
			{
				"name": "IterateOverDatasets",
				"type": "ForEach",
				"dependsOn": [
					{
						"activity": "GetGovernanceMetadata",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"items": {
						"value": "@activity('GetGovernanceMetadata').output.datasets",
						"type": "Expression"
					},
					"isSequential": false,
					"batchCount": 10,
					"activities": [
						{
							"name": "OperationaLogIterateStart",
							"type": "ExecutePipeline",
							"dependsOn": [],
							"userProperties": [],
							"typeProperties": {
								"pipeline": {
									"referenceName": "OperationalLogPipeline",
									"type": "PipelineReference"
								},
								"waitOnCompletion": false,
								"parameters": {
									"nivel": "INFO",
									"modulo": "EXTRACTION_SHAREPOINT",
									"pipelineName": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"logType": "INFO",
									"applicationName": {
										"value": "@pipeline().parameters.applicationName",
										"type": "Expression"
									},
									"dataDate": {
										"value": "@variables('referenceDate')",
										"type": "Expression"
									},
									"datasetName": {
										"value": "@item().dataset_name",
										"type": "Expression"
									},
									"region": {
										"value": "@pipeline().parameters.region",
										"type": "Expression"
									},
									"message": {
										"value": "@concat('Starting copy process for dataset: ', item().dataset_name)",
										"type": "Expression"
									},
									"sourceType": {
										"value": "sharepoint",
										"type": "Expression"
									},
									"uid": {
										"value": "@variables('uid')",
										"type": "Expression"
									},
									"parentUid": {
										"value": "@trim('')",
										"type": "Expression"
									},
									"datasetIn": {
										"value": "@trim('')",
										"type": "Expression"
									},
									"datasetOut": {
										"value": "@trim('')",
										"type": "Expression"
									}
								}
							}
						},
						{
							"name": "OperationalLogIterateEnd",
							"type": "ExecutePipeline",
							"dependsOn": [
								{
									"activity": "CopyDataFromList",
									"dependencyConditions": [
										"Failed"
									]
								}
							],
							"userProperties": [],
							"typeProperties": {
								"pipeline": {
									"referenceName": "OperationalLogPipeline",
									"type": "PipelineReference"
								},
								"waitOnCompletion": true,
								"parameters": {
									"nivel": {
										"value": "ERROR",
										"type": "Expression"
									},
									"modulo": "EXTRACTION_SHAREPOINT",
									"pipelineName": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"logType": {
										"value": "ERROR",
										"type": "Expression"
									},
									"applicationName": {
										"value": "@pipeline().parameters.applicationName",
										"type": "Expression"
									},
									"dataDate": {
										"value": "@variables('referenceDate')",
										"type": "Expression"
									},
									"datasetName": {
										"value": "@item().dataset_name",
										"type": "Expression"
									},
									"region": {
										"value": "@pipeline().parameters.region",
										"type": "Expression"
									},
									"message": {
										"value": "@concat('Error, file not found for dataset: ', item().dataset_name)",
										"type": "Expression"
									},
									"sourceType": {
										"value": "sharepoint",
										"type": "Expression"
									},
									"uid": {
										"value": "@variables('uid')",
										"type": "Expression"
									},
									"parentUid": {
										"value": "@trim('')",
										"type": "Expression"
									},
									"datasetIn": {
										"value": "@trim('')",
										"type": "Expression"
									},
									"datasetOut": {
										"value": "@trim('')",
										"type": "Expression"
									}
								}
							}
						},
						{
							"name": "HttpToken",
							"type": "WebActivity",
							"dependsOn": [
								{
									"activity": "Set appSecretToken",
									"dependencyConditions": [
										"Succeeded"
									]
								},
								{
									"activity": "Set appIdToken",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"timeout": "7.00:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": true,
								"secureInput": true
							},
							"userProperties": [],
							"typeProperties": {
								"url": "https://accounts.accesscontrol.windows.net/0a25214f-ee52-483c-b96b-dc79f3227a6f/tokens/OAuth/2",
								"method": "POST",
								"headers": {
									"Content-Type": "application/x-www-form-urlencoded"
								},
								"body": {
									"value": "@concat('client_id=', variables('appIdToken'), '@0a25214f-ee52-483c-b96b-dc79f3227a6f&client_secret=',  encodeUriComponent(variables('appSecretToken')), '&grant_type=client_credentials&resource=00000003-0000-0ff1-ce00-000000000000/repsol365.sharepoint.com@0a25214f-ee52-483c-b96b-dc79f3227a6f')",
									"type": "Expression"
								}
							}
						},
						{
							"name": "Set appIdToken",
							"type": "SetVariable",
							"dependsOn": [
								{
									"activity": "GetAppIdToken",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"userProperties": [],
							"typeProperties": {
								"variableName": "appIdToken",
								"value": {
									"value": "@activity('GetAppIdToken').output.value",
									"type": "Expression"
								}
							}
						},
						{
							"name": "GetAppIdToken",
							"type": "WebActivity",
							"dependsOn": [
								{
									"activity": "OperationaLogIterateStart",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"timeout": "7.00:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": true,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"url": {
									"value": "@concat('https://', replace(replace(pipeline().DataFactory, 'dfcore', ''),'ds', ''), 'corekv.vault.azure.net/secrets/',activity('GetGovernanceMetadata').output.datasets[0].clientId,'?api-version=7.0')",
									"type": "Expression"
								},
								"connectVia": {
									"referenceName": "IntegrationRuntimeFreezer",
									"type": "IntegrationRuntimeReference"
								},
								"method": "GET",
								"authentication": {
									"type": "MSI",
									"resource": "https://vault.azure.net"
								}
							}
						},
						{
							"name": "GetAppSecretToken",
							"type": "WebActivity",
							"dependsOn": [
								{
									"activity": "OperationaLogIterateStart",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"timeout": "7.00:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": true,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"url": {
									"value": "@concat('https://', replace(replace(pipeline().DataFactory, 'dfcore', ''),'ds', ''), 'corekv.vault.azure.net/secrets/',activity('GetGovernanceMetadata').output.datasets[0].clientSecret,'?api-version=7.0')",
									"type": "Expression"
								},
								"connectVia": {
									"referenceName": "IntegrationRuntimeFreezer",
									"type": "IntegrationRuntimeReference"
								},
								"method": "GET",
								"authentication": {
									"type": "MSI",
									"resource": "https://vault.azure.net"
								}
							}
						},
						{
							"name": "Set appSecretToken",
							"type": "SetVariable",
							"dependsOn": [
								{
									"activity": "GetAppSecretToken",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"userProperties": [],
							"typeProperties": {
								"variableName": "appSecretToken",
								"value": {
									"value": "@activity('GetAppSecretToken').output.value",
									"type": "Expression"
								}
							}
						},
						{
							"name": "Set httpToken",
							"type": "SetVariable",
							"dependsOn": [
								{
									"activity": "HttpToken",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"userProperties": [],
							"typeProperties": {
								"variableName": "httpToken",
								"value": {
									"value": "@activity('HttpToken').output.access_token",
									"type": "Expression"
								}
							}
						},
						{
							"name": "AppendPartitioned DatasetIn",
							"type": "AppendVariable",
							"dependsOn": [
								{
									"activity": "CopyDataFromList",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"userProperties": [],
							"typeProperties": {
								"variableName": "datasetIn",
								"value": {
									"value": "@concat('{\"NAME\":\"', item().dataset_name, '\",\"PATH\":\"', item().listNameFilePath,'/', formatDateTime(variables('referenceDate'), '\"year=\"yyyy/\"month=\"MM/\"day=\"dd\"/\"'), item().listNameFilePath, '\",\"NUM_ITEMS\":\"', activity('CopyDataFromList').output.filesWritten,'\"}')",
									"type": "Expression"
								}
							}
						},
						{
							"name": "AppendPartitioned DatasetOut",
							"type": "AppendVariable",
							"dependsOn": [
								{
									"activity": "CopyDataFromList",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"userProperties": [],
							"typeProperties": {
								"variableName": "datasetOut",
								"value": {
									"value": "@concat('{\"NAME\":\"', item().dataset_name, '\",\"PATH\":\"wasbs://staging@', replace(replace(pipeline().DataFactory, 'dfcore', ''),'ds', ''), 'sa', item().business_unit, 'sl.blob.core.windows.net/aws/', item().application_name, '/', item().region, '/', item().dataset_name, '/', item().sink_date, '/', activity('GetGovernanceMetadata').output.ts, '/','\",\"NUM_ITEMS\":\"', activity('CopyDataFromList').output.filesWritten,'\"}')",
									"type": "Expression"
								}
							}
						},
						{
							"name": "CopyDataFromList",
							"type": "Copy",
							"dependsOn": [
								{
									"activity": "Set httpToken",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"timeout": "7.00:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"source": {
									"type": "SharePointOnlineListSource",
									"query": {
										"value": "@item().query",
										"type": "Expression"
									},
									"httpRequestTimeout": "00:05:00"
								},
								"sink": {
									"type": "BlobSink"
								},
								"enableStaging": false
							},
							"inputs": [
								{
									"referenceName": "SharePointListDataset",
									"type": "DatasetReference",
									"parameters": {
										"ListName": {
											"value": "@item().listNameFilePath",
											"type": "Expression"
										},
										"clientId": {
											"value": "@item().clientId",
											"type": "Expression"
										},
										"clientSecret": {
											"value": "@item().clientSecret",
											"type": "Expression"
										}
									}
								}
							],
							"outputs": [
								{
									"referenceName": "BlobStorageDatasetLanding",
									"type": "DatasetReference",
									"parameters": {
										"date": {
											"value": "@concat(item().sink_date, '/', activity('GetGovernanceMetadata').output.ts)",
											"type": "Expression"
										},
										"extractionTool": "sharepoint",
										"region": {
											"value": "@pipeline().parameters.region",
											"type": "Expression"
										},
										"format": "avro",
										"applicationName": {
											"value": "@pipeline().parameters.applicationName",
											"type": "Expression"
										},
										"datasetName": {
											"value": "@pipeline().parameters.datasetName",
											"type": "Expression"
										},
										"businessUnit": {
											"value": "@item().business_unit",
											"type": "Expression"
										}
									}
								}
							]
						}
					]
				}
			},
			{
				"name": "OperationaLogErrorGetMetada",
				"type": "ExecutePipeline",
				"dependsOn": [
					{
						"activity": "GetGovernanceMetadata",
						"dependencyConditions": [
							"Failed"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"pipeline": {
						"referenceName": "OperationalLogPipeline",
						"type": "PipelineReference"
					},
					"waitOnCompletion": true,
					"parameters": {
						"nivel": "ERROR",
						"modulo": "EXTRACTION_SHAREPOINT",
						"pipelineName": {
							"value": "@pipeline().Pipeline",
							"type": "Expression"
						},
						"logType": "END",
						"applicationName": {
							"value": "@pipeline().parameters.applicationName",
							"type": "Expression"
						},
						"dataDate": {
							"value": "@variables('referenceDate')",
							"type": "Expression"
						},
						"region": {
							"value": "@pipeline().parameters.region",
							"type": "Expression"
						},
						"message": {
							"value": "@concat('GetGovernanceMetadata: ', activity('GetGovernanceMetadata').error.message)",
							"type": "Expression"
						},
						"sourceType": {
							"value": "sharepoint",
							"type": "Expression"
						},
						"uid": {
							"value": "@variables('uid')",
							"type": "Expression"
						}
					}
				}
			},
			{
				"name": "OperationaLogErrorIterate",
				"type": "ExecutePipeline",
				"dependsOn": [
					{
						"activity": "IterateOverDatasets",
						"dependencyConditions": [
							"Failed"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"pipeline": {
						"referenceName": "OperationalLogPipeline",
						"type": "PipelineReference"
					},
					"waitOnCompletion": true,
					"parameters": {
						"nivel": "ERROR",
						"modulo": "EXTRACTION_SHAREPOINT",
						"pipelineName": {
							"value": "@pipeline().Pipeline",
							"type": "Expression"
						},
						"logType": "END",
						"applicationName": {
							"value": "@pipeline().parameters.applicationName",
							"type": "Expression"
						},
						"dataDate": {
							"value": "@variables('referenceDate')",
							"type": "Expression"
						},
						"region": {
							"value": "@pipeline().parameters.region",
							"type": "Expression"
						},
						"sourceType": {
							"value": "sharepoint",
							"type": "Expression"
						},
						"uid": {
							"value": "@variables('uid')",
							"type": "Expression"
						}
					}
				}
			},
			{
				"name": "RenewHttpMetadataToken",
				"type": "WebActivity",
				"dependsOn": [
					{
						"activity": "IterateOverDatasets",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": true,
					"secureInput": true
				},
				"userProperties": [],
				"typeProperties": {
					"url": "https://login.microsoftonline.com/0a25214f-ee52-483c-b96b-dc79f3227a6f/oauth2/v2.0/token",
					"method": "POST",
					"headers": {
						"Content-Type": "application/x-www-form-urlencoded"
					},
					"body": {
						"value": "@concat('client_id=', variables('metadataIdToken'), '&client_secret=',  encodeUriComponent(variables('metadataSecretToken')), '&grant_type=client_credentials&scope=https://graph.microsoft.com/.default')",
						"type": "Expression"
					}
				}
			},
			{
				"name": "Renew Set metadataHttpToken",
				"type": "SetVariable",
				"dependsOn": [
					{
						"activity": "RenewHttpMetadataToken",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"variableName": "metadataHttpToken",
					"value": {
						"value": "@activity('RenewHttpMetadataToken').output.access_token",
						"type": "Expression"
					}
				}
			}
		],
		"parameters": {
			"applicationName": {
				"type": "string"
			},
			"datasetName": {
				"type": "string"
			},
			"region": {
				"type": "string"
			},
			"referenceDate": {
				"type": "string"
			},
			"package": {
				"type": "string"
			}
		},
		"variables": {
			"appIdToken": {
				"type": "String"
			},
			"appSecretToken": {
				"type": "String"
			},
			"httpToken": {
				"type": "String"
			},
			"uid": {
				"type": "String",
				"defaultValue": "@if(equals(pipeline().parameters.package, '*'), concat('EXTRACTION_SHAREPOINT#$', pipeline().parameters.applicationName, '$_', pipeline().parameters.region, '#', if(empty(pipeline().parameters.referenceDate),utcnow('yyyy/MM/dd'),pipeline().parameters.referenceDate) , '#', utcnow('yyyyMMddHHmmssfff')), concat('EXTRACTION_SHAREPOINT#', pipeline().parameters.package, '_', pipeline().parameters.applicationName, '_', pipeline().parameters.region, '#', if(empty(pipeline().parameters.referenceDate),utcnow('yyyy/MM/dd'),pipeline().parameters.referenceDate) , '#', utcnow('yyyyMMddHHmmssfff')))"
			},
			"referenceDate": {
				"type": "String",
				"defaultValue": "@if(empty(pipeline().parameters.referenceDate),utcnow('yyyy/MM/dd'),pipeline().parameters.referenceDate)"
			},
			"metadataIdToken": {
				"type": "String"
			},
			"metadataSecretToken": {
				"type": "String"
			},
			"metadataHttpToken": {
				"type": "String"
			},
			"datasetIn": {
				"type": "Array"
			},
			"datasetOut": {
				"type": "Array"
			}
		},
		"folder": {
			"name": "extraction/sharepoint"
		},
		"annotations": []
	}
}