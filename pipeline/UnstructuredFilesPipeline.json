{
	"name": "UnstructuredFilesPipeline",
	"properties": {
		"activities": [
			{
				"name": "IterateOverAllTables",
				"type": "ForEach",
				"dependsOn": [
					{
						"activity": "GetGovernanceMetadata",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"items": {
						"value": "@activity('GetGovernanceMetadata').output.datasets",
						"type": "Expression"
					},
					"isSequential": false,
					"batchCount": 10,
					"activities": [
						{
							"name": "CopyData",
							"type": "Copy",
							"dependsOn": [
								{
									"activity": "Set keepOriginalRoute",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"timeout": "7.00:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"source": {
									"type": "FileSystemSource",
									"recursive": true
								},
								"sink": {
									"type": "AzureDataLakeStoreSink",
									"copyBehavior": "PreserveHierarchy"
								},
								"enableStaging": false
							},
							"inputs": [
								{
									"referenceName": "ExternalSFTPDataset",
									"type": "DatasetReference",
									"parameters": {
										"folder": {
											"value": "@{concat(item().folder,if(bool(variables('keepOriginalRoute')), '', concat('/',formatDateTime(variables('referenceDate'), item().filename_date_format),'/',if(equals(pipeline().parameters.mock,'true'),item().dataset_name,if(empty(item().fileName),item().dataset_name,item().fileName)))))}",
											"type": "Expression"
										},
										"host": "@{item().host}",
										"port": "@{item().port}",
										"secret_name": "@{item().secret_name}",
										"user": "@{item().user_name}",
										"delimiter": "@{item().delimiter}"
									}
								}
							],
							"outputs": [
								{
									"referenceName": "DataLakeUnstructured",
									"type": "DatasetReference",
									"parameters": {
										"p_folder_path": {
											"value": "@{concat('raw', '/file/', item().application_name, '/', item().region, '/', if(equals(pipeline().parameters.mock,'false'),item().dataset_name,concat(replace(item().folder, '/', '_'), if(empty(item().folder), '', '_'), toLower(item().dataset_name))), '/', item().sink_date)}",
											"type": "Expression"
										},
										"p_file_name": "*",
										"p_dl_name": {
											"value": "@{concat(replace(replace(pipeline().DataFactory, 'dfcore', ''),'ds', ''), item().business_unit, 'dapdls')}",
											"type": "Expression"
										}
									}
								}
							]
						},
						{
							"name": "OperationaLogIterateStart",
							"type": "ExecutePipeline",
							"dependsOn": [],
							"userProperties": [],
							"typeProperties": {
								"pipeline": {
									"referenceName": "OperationalLogPipeline",
									"type": "PipelineReference"
								},
								"waitOnCompletion": false,
								"parameters": {
									"nivel": "INFO",
									"modulo": "EXTRACTION_FILES_UNSTRUCTURED",
									"pipelineName": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"logType": "INFO",
									"applicationName": {
										"value": "@pipeline().parameters.applicationName",
										"type": "Expression"
									},
									"dataDate": {
										"value": "@variables('referenceDate')",
										"type": "Expression"
									},
									"datasetName": {
										"value": "@item().dataset_name",
										"type": "Expression"
									},
									"region": {
										"value": "@pipeline().parameters.region",
										"type": "Expression"
									},
									"message": {
										"value": "@concat('Starting copy process for dataset: ', item().dataset_name)",
										"type": "Expression"
									},
									"sourceType": {
										"value": "@pipeline().parameters.sourceType",
										"type": "Expression"
									},
									"uid": {
										"value": "@variables('uid')",
										"type": "Expression"
									},
									"parentUid": {
										"value": "@trim('')",
										"type": "Expression"
									},
									"datasetIn": {
										"value": "@trim('')",
										"type": "Expression"
									},
									"datasetOut": {
										"value": "@trim('')",
										"type": "Expression"
									}
								}
							}
						},
						{
							"name": "OperationaLogIterateEnd",
							"type": "ExecutePipeline",
							"dependsOn": [
								{
									"activity": "If Condition Delete_Source",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"userProperties": [],
							"typeProperties": {
								"pipeline": {
									"referenceName": "OperationalLogPipeline",
									"type": "PipelineReference"
								},
								"waitOnCompletion": false,
								"parameters": {
									"nivel": "INFO",
									"modulo": "EXTRACTION_FILES_UNSTRUCTURED",
									"pipelineName": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"logType": "INFO",
									"applicationName": {
										"value": "@pipeline().parameters.applicationName",
										"type": "Expression"
									},
									"dataDate": {
										"value": "@variables('referenceDate')",
										"type": "Expression"
									},
									"datasetName": {
										"value": "@item().dataset_name",
										"type": "Expression"
									},
									"region": {
										"value": "@pipeline().parameters.region",
										"type": "Expression"
									},
									"message": {
										"value": "@concat('Finshed copy process for dataset: ', item().dataset_name)",
										"type": "Expression"
									},
									"sourceType": {
										"value": "@pipeline().parameters.sourceType",
										"type": "Expression"
									},
									"uid": {
										"value": "@variables('uid')",
										"type": "Expression"
									},
									"parentUid": {
										"value": "@trim('')",
										"type": "Expression"
									},
									"datasetIn": {
										"value": "@trim('')",
										"type": "Expression"
									},
									"datasetOut": {
										"value": "@trim('')",
										"type": "Expression"
									}
								}
							}
						},
						{
							"name": "OperationaLogErrorCopyData",
							"type": "ExecutePipeline",
							"dependsOn": [
								{
									"activity": "CopyData",
									"dependencyConditions": [
										"Failed"
									]
								}
							],
							"userProperties": [],
							"typeProperties": {
								"pipeline": {
									"referenceName": "OperationalLogPipeline",
									"type": "PipelineReference"
								},
								"waitOnCompletion": true,
								"parameters": {
									"nivel": {
										"value": "@if(item().is_optional, 'INFO', 'ERROR')",
										"type": "Expression"
									},
									"modulo": "EXTRACTION_FILES_UNSTRUCTURED",
									"pipelineName": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"logType": {
										"value": "@if(item().is_optional, 'INFO', 'ERROR')",
										"type": "Expression"
									},
									"applicationName": {
										"value": "@pipeline().parameters.applicationName",
										"type": "Expression"
									},
									"dataDate": {
										"value": "@variables('referenceDate')",
										"type": "Expression"
									},
									"datasetName": {
										"value": "@item().dataset_name",
										"type": "Expression"
									},
									"region": {
										"value": "@pipeline().parameters.region",
										"type": "Expression"
									},
									"message": {
										"value": "@if(item().is_optional, concat('Optional file not found, Copy Data ommitted for dataset: ', item().dataset_name), concat('CopyData: ', activity('CopyData').error.message))",
										"type": "Expression"
									},
									"sourceType": {
										"value": "@pipeline().parameters.sourceType",
										"type": "Expression"
									},
									"uid": {
										"value": "@variables('uid')",
										"type": "Expression"
									},
									"parentUid": {
										"value": "@trim('')",
										"type": "Expression"
									},
									"datasetIn": {
										"value": "@trim('')",
										"type": "Expression"
									},
									"datasetOut": {
										"value": "@trim('')",
										"type": "Expression"
									}
								}
							}
						},
						{
							"name": "Append DatasetIn",
							"type": "AppendVariable",
							"dependsOn": [
								{
									"activity": "If Condition Delete_Source",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"userProperties": [],
							"typeProperties": {
								"variableName": "datasetIn",
								"value": {
									"value": "@concat('{\"NAME\":\"', item().dataset_name, '\",\"PATH\":\"', item().folder, if(bool(variables('keepOriginalRoute')),'',concat('/', item().sink_date, '/', item().dataset_name)),'\",\"NUM_ITEMS\":\"', activity('CopyData').output.dataRead,'\"}')",
									"type": "Expression"
								}
							}
						},
						{
							"name": "Append DatasetOut",
							"type": "AppendVariable",
							"dependsOn": [
								{
									"activity": "If Condition Delete_Source",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"userProperties": [],
							"typeProperties": {
								"variableName": "datasetOut",
								"value": {
									"value": "@concat('{\"NAME\":\"', item().dataset_name, '\",\"PATH\":\"adl://', replace(replace(pipeline().DataFactory, 'dfcore', ''),'ds', ''), item().business_unit, 'dapdls.azuredatalakestore.net/raw/file/', item().application_name, '/', item().region, '/', replace(item().folder, '/', '_'), if(empty(item().folder), '', '_'), toLower(item().dataset_name), '/', item().sink_date, '/','\",\"NUM_ITEMS\":\"', activity('CopyData').output.dataWritten,'\"}')",
									"type": "Expression"
								}
							}
						},
						{
							"name": "If Condition Delete_Source",
							"type": "IfCondition",
							"dependsOn": [
								{
									"activity": "CopyData",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"userProperties": [],
							"typeProperties": {
								"expression": {
									"value": "@and(bool(item().delete_source),bool(variables('keepOriginalRoute')))",
									"type": "Expression"
								},
								"ifTrueActivities": [
									{
										"name": "OperationaLogDeleteSourceFileEnd",
										"type": "ExecutePipeline",
										"dependsOn": [
											{
												"activity": "DeleteSourceFile",
												"dependencyConditions": [
													"Succeeded"
												]
											}
										],
										"userProperties": [],
										"typeProperties": {
											"pipeline": {
												"referenceName": "OperationalLogPipeline",
												"type": "PipelineReference"
											},
											"waitOnCompletion": true,
											"parameters": {
												"nivel": "INFO",
												"modulo": "EXTRACTION_FILES",
												"pipelineName": {
													"value": "@pipeline().Pipeline",
													"type": "Expression"
												},
												"logType": "INFO",
												"applicationName": {
													"value": "@pipeline().parameters.applicationName",
													"type": "Expression"
												},
												"dataDate": {
													"value": "@variables('referenceDate')",
													"type": "Expression"
												},
												"datasetName": {
													"value": "@item().dataset_name",
													"type": "Expression"
												},
												"region": {
													"value": "@pipeline().parameters.region",
													"type": "Expression"
												},
												"message": {
													"value": "@concat('Finished file deletion: ', '*.',item().file_type)",
													"type": "Expression"
												},
												"sourceType": {
													"value": "@pipeline().parameters.sourceType",
													"type": "Expression"
												},
												"uid": {
													"value": "@variables('uid')",
													"type": "Expression"
												},
												"parentUid": {
													"value": "@trim('')",
													"type": "Expression"
												},
												"datasetIn": {
													"value": "@trim('')",
													"type": "Expression"
												},
												"datasetOut": {
													"value": "@trim('')",
													"type": "Expression"
												}
											}
										}
									},
									{
										"name": "DeleteSourceFile",
										"type": "Delete",
										"dependsOn": [],
										"policy": {
											"timeout": "7.00:00:00",
											"retry": 0,
											"retryIntervalInSeconds": 30,
											"secureOutput": false,
											"secureInput": false
										},
										"userProperties": [],
										"typeProperties": {
											"dataset": {
												"referenceName": "ExternatSFTPFolderDataset",
												"type": "DatasetReference",
												"parameters": {
													"folder": "@{item().folder}/",
													"host": "@{item().host}",
													"port": "@{item().port}",
													"secret_name": "@{item().secret_name}",
													"fileName": {
														"value": "*.@{item().file_type}",
														"type": "Expression"
													},
													"user": "@{item().user_name}",
													"delimiter": "@{item().delimiter}"
												}
											},
											"enableLogging": false,
											"recursive": true
										}
									},
									{
										"name": "OperationaLogErrorDeleteSourceFile",
										"type": "ExecutePipeline",
										"dependsOn": [
											{
												"activity": "DeleteSourceFile",
												"dependencyConditions": [
													"Failed"
												]
											}
										],
										"userProperties": [],
										"typeProperties": {
											"pipeline": {
												"referenceName": "OperationalLogPipeline",
												"type": "PipelineReference"
											},
											"waitOnCompletion": true,
											"parameters": {
												"nivel": "ERROR",
												"modulo": "EXTRACTION_FILES",
												"pipelineName": {
													"value": "@pipeline().Pipeline",
													"type": "Expression"
												},
												"logType": "ERROR",
												"applicationName": {
													"value": "@pipeline().parameters.applicationName",
													"type": "Expression"
												},
												"dataDate": {
													"value": "@variables('referenceDate')",
													"type": "Expression"
												},
												"datasetName": {
													"value": "@item().dataset_name",
													"type": "Expression"
												},
												"region": {
													"value": "@pipeline().parameters.region",
													"type": "Expression"
												},
												"message": {
													"value": "@concat('DeleteSourceFile: ', activity('DeleteSourceFile').error.message)",
													"type": "Expression"
												},
												"sourceType": {
													"value": "@pipeline().parameters.sourceType",
													"type": "Expression"
												},
												"uid": {
													"value": "@trim('')",
													"type": "Expression"
												},
												"parentUid": {
													"value": "@trim('')",
													"type": "Expression"
												},
												"datasetIn": {
													"value": "@trim('')",
													"type": "Expression"
												},
												"datasetOut": {
													"value": "@trim('')",
													"type": "Expression"
												}
											}
										}
									}
								]
							}
						},
						{
							"name": "Set keepOriginalRoute",
							"type": "SetVariable",
							"dependsOn": [
								{
									"activity": "OperationaLogIterateStart",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"userProperties": [],
							"typeProperties": {
								"variableName": "keepOriginalRoute",
								"value": {
									"value": "@if(equals(item().keep_original_route,null),false,bool(item().keep_original_route))",
									"type": "Expression"
								}
							}
						}
					]
				}
			},
			{
				"name": "ExecuteProcessorPipeline",
				"type": "ExecutePipeline",
				"dependsOn": [
					{
						"activity": "IterateOverAllTables",
						"dependencyConditions": [
							"Succeeded",
							"Failed"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"pipeline": {
						"referenceName": "ProcessorPipeline",
						"type": "PipelineReference"
					},
					"waitOnCompletion": true,
					"parameters": {
						"applicationName": {
							"value": "@pipeline().parameters.applicationName",
							"type": "Expression"
						},
						"region": {
							"value": "@pipeline().parameters.region",
							"type": "Expression"
						},
						"extractionDate": {
							"value": "@activity('GetGovernanceMetadata').output.datasets[0].sink_date",
							"type": "Expression"
						},
						"parentUid": {
							"value": "@variables('uid')",
							"type": "Expression"
						}
					}
				}
			},
			{
				"name": "OperationaLogStart",
				"type": "ExecutePipeline",
				"dependsOn": [],
				"userProperties": [],
				"typeProperties": {
					"pipeline": {
						"referenceName": "OperationalLogPipeline",
						"type": "PipelineReference"
					},
					"waitOnCompletion": false,
					"parameters": {
						"nivel": "INFO",
						"modulo": "EXTRACTION_FILES_UNSTRUCTURED",
						"pipelineName": {
							"value": "@pipeline().Pipeline",
							"type": "Expression"
						},
						"logType": "START",
						"applicationName": {
							"value": "@pipeline().parameters.applicationName",
							"type": "Expression"
						},
						"dataDate": {
							"value": "@variables('referenceDate')",
							"type": "Expression"
						},
						"region": {
							"value": "@pipeline().parameters.region",
							"type": "Expression"
						},
						"sourceType": {
							"value": "@pipeline().parameters.sourceType",
							"type": "Expression"
						},
						"uid": {
							"value": "@variables('uid')",
							"type": "Expression"
						}
					}
				}
			},
			{
				"name": "OperationaLogErrorGetMetada",
				"type": "ExecutePipeline",
				"dependsOn": [
					{
						"activity": "GetGovernanceMetadata",
						"dependencyConditions": [
							"Failed"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"pipeline": {
						"referenceName": "OperationalLogPipeline",
						"type": "PipelineReference"
					},
					"waitOnCompletion": true,
					"parameters": {
						"nivel": "ERROR",
						"modulo": "EXTRACTION_FILES_UNSTRUCTURED",
						"pipelineName": {
							"value": "@pipeline().Pipeline",
							"type": "Expression"
						},
						"logType": "END",
						"applicationName": {
							"value": "@pipeline().parameters.applicationName",
							"type": "Expression"
						},
						"dataDate": {
							"value": "@variables('referenceDate')",
							"type": "Expression"
						},
						"region": {
							"value": "@pipeline().parameters.region",
							"type": "Expression"
						},
						"message": {
							"value": "@concat('GetGovernanceMetadata: ', activity('GetGovernanceMetadata').error.message)",
							"type": "Expression"
						},
						"sourceType": {
							"value": "@pipeline().parameters.sourceType",
							"type": "Expression"
						},
						"uid": {
							"value": "@variables('uid')",
							"type": "Expression"
						},
						"parentUid": {
							"value": "@trim('')",
							"type": "Expression"
						},
						"datasetIn": {
							"value": "@trim('')",
							"type": "Expression"
						},
						"datasetOut": {
							"value": "@trim('')",
							"type": "Expression"
						}
					}
				}
			},
			{
				"name": "OperationaLogEnd",
				"type": "ExecutePipeline",
				"dependsOn": [
					{
						"activity": "IterateOverAllTables",
						"dependencyConditions": [
							"Succeeded",
							"Failed"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"pipeline": {
						"referenceName": "OperationalLogPipeline",
						"type": "PipelineReference"
					},
					"waitOnCompletion": false,
					"parameters": {
						"nivel": "INFO",
						"modulo": "EXTRACTION_FILES_UNSTRUCTURED",
						"pipelineName": {
							"value": "@pipeline().Pipeline",
							"type": "Expression"
						},
						"logType": "END",
						"applicationName": {
							"value": "@pipeline().parameters.applicationName",
							"type": "Expression"
						},
						"dataDate": {
							"value": "@variables('referenceDate')",
							"type": "Expression"
						},
						"region": {
							"value": "@pipeline().parameters.region",
							"type": "Expression"
						},
						"sourceType": {
							"value": "@pipeline().parameters.sourceType",
							"type": "Expression"
						},
						"uid": {
							"value": "@variables('uid')",
							"type": "Expression"
						},
						"parentUid": {
							"value": "@trim('')",
							"type": "Expression"
						},
						"datasetIn": {
							"value": "@variables('datasetIn')",
							"type": "Expression"
						},
						"datasetOut": {
							"value": "@variables('datasetOut')",
							"type": "Expression"
						}
					}
				}
			},
			{
				"name": "GetAppIdToken",
				"type": "WebActivity",
				"dependsOn": [
					{
						"activity": "OperationaLogStart",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": true,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"url": {
						"value": "@concat('https://', replace(replace(pipeline().DataFactory, 'dfcore', ''),'ds', ''), 'corekv.vault.azure.net/secrets/adapp-extract-id?api-version=7.0')",
						"type": "Expression"
					},
					"connectVia": {
						"referenceName": "IntegrationRuntimeFreezer",
						"type": "IntegrationRuntimeReference"
					},
					"method": "GET",
					"authentication": {
						"type": "MSI",
						"resource": "https://vault.azure.net"
					}
				}
			},
			{
				"name": "Set appIdToken",
				"type": "SetVariable",
				"dependsOn": [
					{
						"activity": "GetAppIdToken",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"variableName": "appIdToken",
					"value": {
						"value": "@activity('GetAppIdToken').output.value",
						"type": "Expression"
					}
				}
			},
			{
				"name": "GetAppSecretToken",
				"type": "WebActivity",
				"dependsOn": [
					{
						"activity": "Set appIdToken",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": true,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"url": {
						"value": "@concat('https://', replace(replace(pipeline().DataFactory, 'dfcore', ''),'ds', ''), 'corekv.vault.azure.net/secrets/adsp-extract-secret?api-version=7.0')",
						"type": "Expression"
					},
					"connectVia": {
						"referenceName": "IntegrationRuntimeFreezer",
						"type": "IntegrationRuntimeReference"
					},
					"method": "GET",
					"authentication": {
						"type": "MSI",
						"resource": "https://vault.azure.net"
					}
				}
			},
			{
				"name": "Set appSecretToken",
				"type": "SetVariable",
				"dependsOn": [
					{
						"activity": "GetAppSecretToken",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"variableName": "appSecretToken",
					"value": {
						"value": "@activity('GetAppSecretToken').output.value",
						"type": "Expression"
					}
				}
			},
			{
				"name": "HttpToken",
				"type": "WebActivity",
				"dependsOn": [
					{
						"activity": "Set appSecretToken",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": true,
					"secureInput": true
				},
				"userProperties": [],
				"typeProperties": {
					"url": "https://login.microsoftonline.com/0a25214f-ee52-483c-b96b-dc79f3227a6f/oauth2/v2.0/token",
					"method": "POST",
					"headers": {
						"Content-Type": "application/x-www-form-urlencoded"
					},
					"body": {
						"value": "@concat('client_id=', variables('appIdToken'), '&client_secret=',  encodeUriComponent(variables('appSecretToken')), '&grant_type=client_credentials&scope=https://graph.microsoft.com/.default')",
						"type": "Expression"
					}
				}
			},
			{
				"name": "Set httpToken",
				"type": "SetVariable",
				"dependsOn": [
					{
						"activity": "HttpToken",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"variableName": "httpToken",
					"value": {
						"value": "@activity('HttpToken').output.access_token",
						"type": "Expression"
					}
				}
			},
			{
				"name": "GetGovernanceMetadata",
				"type": "WebActivity",
				"dependsOn": [
					{
						"activity": "Set httpToken",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": true
				},
				"userProperties": [],
				"typeProperties": {
					"url": {
						"value": "@concat('https://coreutils', replace(replace(pipeline().DataFactory, 'dfcore', ''),'ds', ''), 'akcore.cloudapp.repsol.com/dap-core-extraction-utils/governance-metadata')",
						"type": "Expression"
					},
					"method": "GET",
					"headers": {
						"x-application-name": {
							"value": "@pipeline().parameters.applicationName",
							"type": "Expression"
						},
						"x-region": {
							"value": "@pipeline().parameters.region",
							"type": "Expression"
						},
						"x-source-type": "files",
						"x-reference-date": {
							"value": "@variables('referenceDate')",
							"type": "Expression"
						},
						"x-mock-results": {
							"value": "@pipeline().parameters.mock",
							"type": "Expression"
						},
						"x-package-name": {
							"value": "@pipeline().parameters.package",
							"type": "Expression"
						},
						"Authorization": {
							"value": "@concat('Bearer ', variables('httpToken'))",
							"type": "Expression"
						},
						"x-is-interval": {
							"value": "false",
							"type": "Expression"
						},
						"x-structured": "false"
					}
				}
			}
		],
		"parameters": {
			"applicationName": {
				"type": "String",
				"defaultValue": "application_name"
			},
			"region": {
				"type": "String",
				"defaultValue": "ESP"
			},
			"referenceDate": {
				"type": "string"
			},
			"sourceType": {
				"type": "string",
				"defaultValue": "file"
			},
			"parentUID": {
				"type": "string"
			},
			"package": {
				"type": "string",
				"defaultValue": "*"
			},
			"mock": {
				"type": "string",
				"defaultValue": "True"
			}
		},
		"variables": {
			"referenceDate": {
				"type": "String",
				"defaultValue": "@if(empty(pipeline().parameters.referenceDate),utcnow('yyyy/MM/dd'),pipeline().parameters.referenceDate)"
			},
			"uid": {
				"type": "String",
				"defaultValue": "@if(equals(pipeline().parameters.package, '*'), concat('EXTRACTION_FILES_UNSTRUCTURED#$', pipeline().parameters.applicationName, '$_', pipeline().parameters.region, '#', if(empty(pipeline().parameters.referenceDate),utcnow('yyyy/MM/dd'),pipeline().parameters.referenceDate) , '#', utcnow('yyyyMMddHHmmssfff')), concat('EXTRACTION_FILES_UNSTRUCTURED#', pipeline().parameters.package, '_$', pipeline().parameters.applicationName, '$_', pipeline().parameters.region, '#', if(empty(pipeline().parameters.referenceDate),utcnow('yyyy/MM/dd'),pipeline().parameters.referenceDate) , '#', utcnow('yyyyMMddHHmmssfff')))"
			},
			"datasetIn": {
				"type": "Array"
			},
			"datasetOut": {
				"type": "Array"
			},
			"appIdToken": {
				"type": "String"
			},
			"appSecretToken": {
				"type": "String"
			},
			"httpToken": {
				"type": "String"
			},
			"keepOriginalRoute": {
				"type": "Boolean",
				"defaultValue": false
			}
		},
		"folder": {
			"name": "extraction/files"
		},
		"annotations": []
	},
	"type": "Microsoft.DataFactory/factories/pipelines"
}